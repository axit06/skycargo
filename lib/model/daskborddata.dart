// To parse this JSON data, do
//
//     final daskborddata = daskborddataFromJson(jsonString);

import 'dart:convert';

Daskborddata daskborddataFromJson(String str) => Daskborddata.fromJson(json.decode(str));

String daskborddataToJson(Daskborddata data) => json.encode(data.toJson());

class Daskborddata {
  String status;
  String responseCode;
  String packagesTotal;
  String shipmentsTotal;
  String pickupsTotal;
  String consolidatedTotal;
  List<RegisteredPackagesDatum> registeredPackagesData;
  List<SDatum> shipmentsData;
  List<SDatum> pickupsData;
  List<ConsolidatedDatum> consolidatedData;
  String message;

  Daskborddata({
    required this.status,
    required this.responseCode,
    required this.packagesTotal,
    required this.shipmentsTotal,
    required this.pickupsTotal,
    required this.consolidatedTotal,
    required this.registeredPackagesData,
    required this.shipmentsData,
    required this.pickupsData,
    required this.consolidatedData,
    required this.message,
  });

  factory Daskborddata.fromJson(Map<String, dynamic> json) => Daskborddata(
    status: json["status"],
    responseCode: json["ResponseCode"],
    packagesTotal: json["packages_total"],
    shipmentsTotal: json["shipments_total"],
    pickupsTotal: json["pickups_total"],
    consolidatedTotal: json["consolidated_total"],
    registeredPackagesData: List<RegisteredPackagesDatum>.from(json["registered_packages_data"].map((x) => RegisteredPackagesDatum.fromJson(x))),
    shipmentsData: List<SDatum>.from(json["shipments_data"].map((x) => SDatum.fromJson(x))),
    pickupsData: List<SDatum>.from(json["pickups_data"].map((x) => SDatum.fromJson(x))),
    consolidatedData: List<ConsolidatedDatum>.from(json["consolidated_data"].map((x) => ConsolidatedDatum.fromJson(x))),
    message: json["message"],
  );

  Map<String, dynamic> toJson() => {
    "status": status,
    "ResponseCode": responseCode,
    "packages_total": packagesTotal,
    "shipments_total": shipmentsTotal,
    "pickups_total": pickupsTotal,
    "consolidated_total": consolidatedTotal,
    "registered_packages_data": List<dynamic>.from(registeredPackagesData.map((x) => x.toJson())),
    "shipments_data": List<dynamic>.from(shipmentsData.map((x) => x.toJson())),
    "pickups_data": List<dynamic>.from(pickupsData.map((x) => x.toJson())),
    "consolidated_data": List<dynamic>.from(consolidatedData.map((x) => x.toJson())),
    "message": message,
  };
}

class ConsolidatedDatum {
  int id;
  String invoice;
  DateTime date;
  String stamps;
  String agency;
  String officeOfOrigin;
  String customer;
  String customerAddress;
  String client;
  String clientAddress;
  String shippingMode;
  String packaging;
  String courierCompany;
  String serviceMode;
  String paymentType;
  String deliveryTime;
  String estimatedDate;
  String deliveryStatus;
  String assignDriver;
  String image;
  String shipmentInvoice;
  String shipmentWeight;
  String shipmentWeightVol;
  int totalWeight;
  double totalWeightVol;
  int addPriceKg;
  int addDiscount;
  int addValueAssured;
  int addShippingInsurance;
  int addCustomsDuties;
  int addTax;
  int taxCount;
  double subtotal;
  double discount;
  int shippingInsurance;
  int customsDuties;
  double tax;
  int reissue;
  double total;
  int paidAmount;
  double dueAmount;
  String customersFirstname;
  String customersLastname;
  String status;

  ConsolidatedDatum({
    required this.id,
    required this.invoice,
    required this.date,
    required this.stamps,
    required this.agency,
    required this.officeOfOrigin,
    required this.customer,
    required this.customerAddress,
    required this.client,
    required this.clientAddress,
    required this.shippingMode,
    required this.packaging,
    required this.courierCompany,
    required this.serviceMode,
    required this.paymentType,
    required this.deliveryTime,
    required this.estimatedDate,
    required this.deliveryStatus,
    required this.assignDriver,
    required this.image,
    required this.shipmentInvoice,
    required this.shipmentWeight,
    required this.shipmentWeightVol,
    required this.totalWeight,
    required this.totalWeightVol,
    required this.addPriceKg,
    required this.addDiscount,
    required this.addValueAssured,
    required this.addShippingInsurance,
    required this.addCustomsDuties,
    required this.addTax,
    required this.taxCount,
    required this.subtotal,
    required this.discount,
    required this.shippingInsurance,
    required this.customsDuties,
    required this.tax,
    required this.reissue,
    required this.total,
    required this.paidAmount,
    required this.dueAmount,
    required this.customersFirstname,
    required this.customersLastname,
    required this.status,
  });

  factory ConsolidatedDatum.fromJson(Map<String, dynamic> json) => ConsolidatedDatum(
    id: json["id"],
    invoice: json["invoice"],
    date: DateTime.parse(json["date"]),
    stamps: json["stamps"],
    agency: json["agency"],
    officeOfOrigin: json["office_of_origin"],
    customer: json["customer"],
    customerAddress: json["customer_address"],
    client: json["client"],
    clientAddress: json["client_address"],
    shippingMode: json["shipping_mode"],
    packaging: json["packaging"],
    courierCompany: json["courier_company"],
    serviceMode: json["service_mode"],
    paymentType: json["payment_type"],
    deliveryTime: json["delivery_time"],
    estimatedDate: json["estimated_date"],
    deliveryStatus: json["delivery_status"],
    assignDriver: json["assign_driver"],
    image: json["image"],
    shipmentInvoice: json["shipment_invoice"],
    shipmentWeight: json["shipment_weight"],
    shipmentWeightVol: json["shipment_weight_vol"],
    totalWeight: json["total_weight"],
    totalWeightVol: json["total_weight_vol"]?.toDouble(),
    addPriceKg: json["add_price_kg"],
    addDiscount: json["add_discount"],
    addValueAssured: json["add_value_assured"],
    addShippingInsurance: json["add_shipping_insurance"],
    addCustomsDuties: json["add_customs_duties"],
    addTax: json["add_tax"],
    taxCount: json["tax_count"],
    subtotal: json["subtotal"]?.toDouble(),
    discount: json["discount"]?.toDouble(),
    shippingInsurance: json["shipping_insurance"],
    customsDuties: json["customs_duties"],
    tax: json["tax"]?.toDouble(),
    reissue: json["reissue"],
    total: json["total"]?.toDouble(),
    paidAmount: json["paid_amount"],
    dueAmount: json["due_amount"]?.toDouble(),
    customersFirstname: json["customers_firstname"],
    customersLastname: json["customers_lastname"],
    status: json["status"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "invoice": invoice,
    "date": date.toIso8601String(),
    "stamps": stamps,
    "agency": agency,
    "office_of_origin": officeOfOrigin,
    "customer": customer,
    "customer_address": customerAddress,
    "client": client,
    "client_address": clientAddress,
    "shipping_mode": shippingMode,
    "packaging": packaging,
    "courier_company": courierCompany,
    "service_mode": serviceMode,
    "payment_type": paymentType,
    "delivery_time": deliveryTime,
    "estimated_date": estimatedDate,
    "delivery_status": deliveryStatus,
    "assign_driver": assignDriver,
    "image": image,
    "shipment_invoice": shipmentInvoice,
    "shipment_weight": shipmentWeight,
    "shipment_weight_vol": shipmentWeightVol,
    "total_weight": totalWeight,
    "total_weight_vol": totalWeightVol,
    "add_price_kg": addPriceKg,
    "add_discount": addDiscount,
    "add_value_assured": addValueAssured,
    "add_shipping_insurance": addShippingInsurance,
    "add_customs_duties": addCustomsDuties,
    "add_tax": addTax,
    "tax_count": taxCount,
    "subtotal": subtotal,
    "discount": discount,
    "shipping_insurance": shippingInsurance,
    "customs_duties": customsDuties,
    "tax": tax,
    "reissue": reissue,
    "total": total,
    "paid_amount": paidAmount,
    "due_amount": dueAmount,
    "customers_firstname": customersFirstname,
    "customers_lastname": customersLastname,
    "status": status,
  };
}

class SDatum {
  int id;
  String invoice;
  DateTime date;
  String agency;
  String officeOfOrigin;
  String customer;
  String customerAddress;
  String client;
  String clientAddress;
  String shippingMode;
  String packaging;
  String courierCompany;
  String serviceMode;
  String deliveryTime;
  String paymentType;
  String paymentMethods;
  String deliveryStatus;
  String assignDriver;
  String image;
  String packageName;
  String packageDescription;
  String packageAmount;
  String weight;
  String length;
  String width;
  String height;
  String weightVol;
  String fCharge;
  String decvalue;
  int totalWeight;
  double totalWeightVol;
  int totalDecvalue;
  int addPriceKg;
  int addDiscount;
  int addValueAssured;
  int addShippingInsurance;
  int addCustomsDuties;
  int addTax;
  int taxCount;
  int addDeclaredValue;
  int subtotal;
  int discount;
  int shippingInsurance;
  double customsDuties;
  double tax;
  int declaredValue;
  int fixedCharge;
  int reissue;
  double total;
  double paidAmount;
  double dueAmount;
  String storeId;
  String customersFirstname;
  String customersLastname;
  String shippingStatus;

  SDatum({
    required this.id,
    required this.invoice,
    required this.date,
    required this.agency,
    required this.officeOfOrigin,
    required this.customer,
    required this.customerAddress,
    required this.client,
    required this.clientAddress,
    required this.shippingMode,
    required this.packaging,
    required this.courierCompany,
    required this.serviceMode,
    required this.deliveryTime,
    required this.paymentType,
    required this.paymentMethods,
    required this.deliveryStatus,
    required this.assignDriver,
    required this.image,
    required this.packageName,
    required this.packageDescription,
    required this.packageAmount,
    required this.weight,
    required this.length,
    required this.width,
    required this.height,
    required this.weightVol,
    required this.fCharge,
    required this.decvalue,
    required this.totalWeight,
    required this.totalWeightVol,
    required this.totalDecvalue,
    required this.addPriceKg,
    required this.addDiscount,
    required this.addValueAssured,
    required this.addShippingInsurance,
    required this.addCustomsDuties,
    required this.addTax,
    required this.taxCount,
    required this.addDeclaredValue,
    required this.subtotal,
    required this.discount,
    required this.shippingInsurance,
    required this.customsDuties,
    required this.tax,
    required this.declaredValue,
    required this.fixedCharge,
    required this.reissue,
    required this.total,
    required this.paidAmount,
    required this.dueAmount,
    required this.storeId,
    required this.customersFirstname,
    required this.customersLastname,
    required this.shippingStatus,
  });

  factory SDatum.fromJson(Map<String, dynamic> json) => SDatum(
    id: json["id"],
    invoice: json["invoice"],
    date: DateTime.parse(json["date"]),
    agency: json["agency"],
    officeOfOrigin: json["office_of_origin"],
    customer: json["customer"],
    customerAddress: json["customer_address"],
    client: json["client"],
    clientAddress: json["client_address"],
    shippingMode: json["shipping_mode"],
    packaging: json["packaging"],
    courierCompany: json["courier_company"],
    serviceMode: json["service_mode"],
    deliveryTime: json["delivery_time"],
    paymentType: json["payment_type"],
    paymentMethods: json["payment_methods"],
    deliveryStatus: json["delivery_status"],
    assignDriver: json["assign_driver"],
    image: json["image"],
    packageName: json["package_name"],
    packageDescription: json["package_description"],
    packageAmount: json["package_amount"],
    weight: json["weight"],
    length: json["length"],
    width: json["width"],
    height: json["height"],
    weightVol: json["weight_vol"],
    fCharge: json["f_charge"],
    decvalue: json["decvalue"],
    totalWeight: json["total_weight"],
    totalWeightVol: json["total_weight_vol"]?.toDouble(),
    totalDecvalue: json["total_decvalue"],
    addPriceKg: json["add_price_kg"],
    addDiscount: json["add_discount"],
    addValueAssured: json["add_value_assured"],
    addShippingInsurance: json["add_shipping_insurance"],
    addCustomsDuties: json["add_customs_duties"],
    addTax: json["add_tax"],
    taxCount: json["tax_count"],
    addDeclaredValue: json["add_declared_value"],
    subtotal: json["subtotal"],
    discount: json["discount"],
    shippingInsurance: json["shipping_insurance"],
    customsDuties: json["customs_duties"]?.toDouble(),
    tax: json["tax"]?.toDouble(),
    declaredValue: json["declared_value"],
    fixedCharge: json["fixed_charge"],
    reissue: json["reissue"],
    total: json["total"]?.toDouble(),
    paidAmount: json["paid_amount"]?.toDouble(),
    dueAmount: json["due_amount"]?.toDouble(),
    storeId: json["store_id"],
    customersFirstname: json["customers_firstname"],
    customersLastname: json["customers_lastname"],
    shippingStatus: json["shipping_status"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "invoice": invoice,
    "date": date.toIso8601String(),
    "agency": agency,
    "office_of_origin": officeOfOrigin,
    "customer": customer,
    "customer_address": customerAddress,
    "client": client,
    "client_address": clientAddress,
    "shipping_mode": shippingMode,
    "packaging": packaging,
    "courier_company": courierCompany,
    "service_mode": serviceMode,
    "delivery_time": deliveryTime,
    "payment_type": paymentType,
    "payment_methods": paymentMethods,
    "delivery_status": deliveryStatus,
    "assign_driver": assignDriver,
    "image": image,
    "package_name": packageName,
    "package_description": packageDescription,
    "package_amount": packageAmount,
    "weight": weight,
    "length": length,
    "width": width,
    "height": height,
    "weight_vol": weightVol,
    "f_charge": fCharge,
    "decvalue": decvalue,
    "total_weight": totalWeight,
    "total_weight_vol": totalWeightVol,
    "total_decvalue": totalDecvalue,
    "add_price_kg": addPriceKg,
    "add_discount": addDiscount,
    "add_value_assured": addValueAssured,
    "add_shipping_insurance": addShippingInsurance,
    "add_customs_duties": addCustomsDuties,
    "add_tax": addTax,
    "tax_count": taxCount,
    "add_declared_value": addDeclaredValue,
    "subtotal": subtotal,
    "discount": discount,
    "shipping_insurance": shippingInsurance,
    "customs_duties": customsDuties,
    "tax": tax,
    "declared_value": declaredValue,
    "fixed_charge": fixedCharge,
    "reissue": reissue,
    "total": total,
    "paid_amount": paidAmount,
    "due_amount": dueAmount,
    "store_id": storeId,
    "customers_firstname": customersFirstname,
    "customers_lastname": customersLastname,
    "shipping_status": shippingStatus,
  };
}

class RegisteredPackagesDatum {
  int id;
  String invoice;
  DateTime date;
  String agency;
  String officeOfOrigin;
  String customer;
  String customerAddress;
  String trackingNo;
  String supplier;
  int purchasePrice;
  String shippingMode;
  String packaging;
  String courierCompany;
  String serviceMode;
  String deliveryTime;
  String assignDriver;
  String status;
  String image;
  String packageName;
  String packageDescription;
  String packageAmount;
  String weight;
  String length;
  String width;
  String height;
  String weightVol;
  String fCharge;
  String decvalue;
  String totalWeight;
  String totalWeightVol;
  String totalDecvalue;
  int addPriceKg;
  int addDiscount;
  int addValueAssured;
  int addShippingInsurance;
  int addCustomsDuties;
  int addTax;
  String taxCount;
  int addDeclaredValue;
  double subtotal;
  double discount;
  double shippingInsurance;
  double customsDuties;
  double tax;
  double declaredValue;
  int fixedCharge;
  int reissue;
  double total;
  double paidAmount;
  int dueAmount;
  String storeId;
  String customersFirstname;
  String customersLastname;
  String shippingStatus;

  RegisteredPackagesDatum({
    required this.id,
    required this.invoice,
    required this.date,
    required this.agency,
    required this.officeOfOrigin,
    required this.customer,
    required this.customerAddress,
    required this.trackingNo,
    required this.supplier,
    required this.purchasePrice,
    required this.shippingMode,
    required this.packaging,
    required this.courierCompany,
    required this.serviceMode,
    required this.deliveryTime,
    required this.assignDriver,
    required this.status,
    required this.image,
    required this.packageName,
    required this.packageDescription,
    required this.packageAmount,
    required this.weight,
    required this.length,
    required this.width,
    required this.height,
    required this.weightVol,
    required this.fCharge,
    required this.decvalue,
    required this.totalWeight,
    required this.totalWeightVol,
    required this.totalDecvalue,
    required this.addPriceKg,
    required this.addDiscount,
    required this.addValueAssured,
    required this.addShippingInsurance,
    required this.addCustomsDuties,
    required this.addTax,
    required this.taxCount,
    required this.addDeclaredValue,
    required this.subtotal,
    required this.discount,
    required this.shippingInsurance,
    required this.customsDuties,
    required this.tax,
    required this.declaredValue,
    required this.fixedCharge,
    required this.reissue,
    required this.total,
    required this.paidAmount,
    required this.dueAmount,
    required this.storeId,
    required this.customersFirstname,
    required this.customersLastname,
    required this.shippingStatus,
  });

  factory RegisteredPackagesDatum.fromJson(Map<String, dynamic> json) => RegisteredPackagesDatum(
    id: json["id"],
    invoice: json["invoice"],
    date: DateTime.parse(json["date"]),
    agency: json["agency"],
    officeOfOrigin: json["office_of_origin"],
    customer: json["customer"],
    customerAddress: json["customer_address"],
    trackingNo: json["tracking_no"],
    supplier: json["supplier"],
    purchasePrice: json["purchase_price"],
    shippingMode: json["shipping_mode"],
    packaging: json["packaging"],
    courierCompany: json["courier_company"],
    serviceMode: json["service_mode"],
    deliveryTime: json["delivery_time"],
    assignDriver: json["assign_driver"],
    status: json["status"],
    image: json["image"],
    packageName: json["package_name"],
    packageDescription: json["package_description"],
    packageAmount: json["package_amount"],
    weight: json["weight"],
    length: json["length"],
    width: json["width"],
    height: json["height"],
    weightVol: json["weight_vol"],
    fCharge: json["f_charge"],
    decvalue: json["decvalue"],
    totalWeight: json["total_weight"],
    totalWeightVol: json["total_weight_vol"],
    totalDecvalue: json["total_decvalue"],
    addPriceKg: json["add_price_kg"],
    addDiscount: json["add_discount"],
    addValueAssured: json["add_value_assured"],
    addShippingInsurance: json["add_shipping_insurance"],
    addCustomsDuties: json["add_customs_duties"],
    addTax: json["add_tax"],
    taxCount: json["tax_count"],
    addDeclaredValue: json["add_declared_value"],
    subtotal: json["subtotal"]?.toDouble(),
    discount: json["discount"]?.toDouble(),
    shippingInsurance: json["shipping_insurance"]?.toDouble(),
    customsDuties: json["customs_duties"]?.toDouble(),
    tax: json["tax"]?.toDouble(),
    declaredValue: json["declared_value"]?.toDouble(),
    fixedCharge: json["fixed_charge"],
    reissue: json["reissue"],
    total: json["total"]?.toDouble(),
    paidAmount: json["paid_amount"]?.toDouble(),
    dueAmount: json["due_amount"],
    storeId: json["store_id"],
    customersFirstname: json["customers_firstname"],
    customersLastname: json["customers_lastname"],
    shippingStatus: json["shipping_status"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "invoice": invoice,
    "date": date.toIso8601String(),
    "agency": agency,
    "office_of_origin": officeOfOrigin,
    "customer": customer,
    "customer_address": customerAddress,
    "tracking_no": trackingNo,
    "supplier": supplier,
    "purchase_price": purchasePrice,
    "shipping_mode": shippingMode,
    "packaging": packaging,
    "courier_company": courierCompany,
    "service_mode": serviceMode,
    "delivery_time": deliveryTime,
    "assign_driver": assignDriver,
    "status": status,
    "image": image,
    "package_name": packageName,
    "package_description": packageDescription,
    "package_amount": packageAmount,
    "weight": weight,
    "length": length,
    "width": width,
    "height": height,
    "weight_vol": weightVol,
    "f_charge": fCharge,
    "decvalue": decvalue,
    "total_weight": totalWeight,
    "total_weight_vol": totalWeightVol,
    "total_decvalue": totalDecvalue,
    "add_price_kg": addPriceKg,
    "add_discount": addDiscount,
    "add_value_assured": addValueAssured,
    "add_shipping_insurance": addShippingInsurance,
    "add_customs_duties": addCustomsDuties,
    "add_tax": addTax,
    "tax_count": taxCount,
    "add_declared_value": addDeclaredValue,
    "subtotal": subtotal,
    "discount": discount,
    "shipping_insurance": shippingInsurance,
    "customs_duties": customsDuties,
    "tax": tax,
    "declared_value": declaredValue,
    "fixed_charge": fixedCharge,
    "reissue": reissue,
    "total": total,
    "paid_amount": paidAmount,
    "due_amount": dueAmount,
    "store_id": storeId,
    "customers_firstname": customersFirstname,
    "customers_lastname": customersLastname,
    "shipping_status": shippingStatus,
  };
}
